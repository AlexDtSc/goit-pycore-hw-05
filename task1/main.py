
# оголошуємо зовнішню функцію caching_fibonacci()
def caching_fibonacci():
    # у зовніщній функції створюємо порожній словник який зберігатиме майбутні кешовані значення чисел Фібоначі
    cache = {}
    # оголошуємо внутрішню функцію fibonacci(n) для обрахунку чисел Фібоначі з аргументом `n` - порядковим індексом зі списку чисел Фібоначі
    def fibonacci(n):
        # за правилами 0-ве та 1-ше число послідовності чисел Фібоначі завжди дорівнює відповідно 0 та 1
        if n <= 0: 
            return 0
        elif n == 1:
            return 1
        # якщо число Фібоначі з порядковим індексом `n` присутнє у словнику 'cache' - тоді вивести значення для ключа 'n'
        elif n in cache:
            return cache[n]
        else:
        # якщо числа Фібоначі з порядковим індексом `n` відсутнє у словнику 'cache' - тоді викликаємо для обрахунку числа Фібоначі викликаємо рекурсивну функцію fibonacci()  
            cache[n] = fibonacci(n - 1) + fibonacci(n - 2)
            return cache[n]

    return fibonacci

# у разі використання функції як модуля для інших файлів - виводити тільки функцію без тестових рядків нижче
if __name__ == '__main__':
    caching_fibonacci()


# Отримуємо функцію fibonacci
fib = caching_fibonacci()

# Використовуємо функцію fibonacci для обчислення чисел Фібоначчі
print(fib(10))  # Виведе 55
print(fib(15))  # Виведе 610

